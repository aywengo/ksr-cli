name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Add explicit permissions
permissions:
  contents: write
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    # Fix: Run go mod tidy to ensure go.sum is up to date
    - name: Tidy modules
      run: |
        go mod tidy
        go mod verify
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    # Simple linting with go vet and go fmt
    - name: Run go vet
      run: go vet ./...
    
    - name: Check formatting
      run: |
        fmt_files=$(gofmt -l .)
        if [ -n "$fmt_files" ]; then
          echo "The following files need formatting:"
          echo "$fmt_files"
          echo "Run 'go fmt ./...' to fix formatting"
          exit 1
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            artifact_name: ksr-cli
            asset_name: ksr-cli-linux-amd64
          - goos: linux
            goarch: arm64
            artifact_name: ksr-cli
            asset_name: ksr-cli-linux-arm64
          - goos: darwin
            goarch: amd64
            artifact_name: ksr-cli
            asset_name: ksr-cli-darwin-amd64
          - goos: darwin
            goarch: arm64
            artifact_name: ksr-cli
            asset_name: ksr-cli-darwin-arm64
          - goos: windows
            goarch: amd64
            artifact_name: ksr-cli.exe
            asset_name: ksr-cli-windows-amd64.exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    # Fix: Ensure dependencies are resolved before building
    - name: Tidy modules
      run: go mod tidy
    
    - name: Download dependencies
      run: go mod download
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ steps.version.outputs.VERSION }}
        BUILD_TIME: $(date -u +%Y-%m-%dT%H:%M:%SZ)
      run: |
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        # Fixed: Use proper ldflags syntax with quotes and pass to cmd package variables
        go build -ldflags "-X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'github.com/aywengo/ksr-cli/cmd.Version=$VERSION' -X 'github.com/aywengo/ksr-cli/cmd.BuildTime=$BUILD_TIME' -s -w" -o ${{ matrix.artifact_name }} .
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.artifact_name }}

  package-deb:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux AMD64 binary
      uses: actions/download-artifact@v4
      with:
        name: ksr-cli-linux-amd64
        path: ./bin/amd64/
    
    - name: Download Linux ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: ksr-cli-linux-arm64
        path: ./bin/arm64/
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="0.0.0-${GITHUB_SHA::8}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create DEB packages
      run: |
        # Install packaging tools
        sudo apt-get update
        sudo apt-get install -y dpkg-dev debhelper
        
        # Create packages for both architectures
        for arch in amd64 arm64; do
          mkdir -p packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/DEBIAN
          mkdir -p packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/usr/bin
          mkdir -p packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/usr/share/man/man1
          mkdir -p packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/etc/bash_completion.d
          
          # Copy binary
          cp bin/$arch/ksr-cli packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/usr/bin/
          chmod +x packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/usr/bin/ksr-cli
          
          # Create control file
          cat > packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/DEBIAN/control << EOF
        Package: ksr-cli
        Version: ${{ steps.version.outputs.VERSION }}
        Section: utils
        Priority: optional
        Architecture: $arch
        Maintainer: Roman Melnyk <aywengo@gmail.com>
        Description: CLI tool for Kafka Schema Registry
         A comprehensive command-line interface for managing Kafka Schema Registry.
         Provides commands to get, create, delete, and manage schemas, subjects, and configurations.
        EOF
          
          # Create bash completion
          ./bin/$arch/ksr-cli completion bash > packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}/etc/bash_completion.d/ksr-cli || true
          
          # Build package
          dpkg-deb --build packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}
          mv packaging/deb-$arch/ksr-cli-${{ steps.version.outputs.VERSION }}.deb ksr-cli_${{ steps.version.outputs.VERSION }}_$arch.deb
        done
    
    - name: Upload DEB artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deb-packages
        path: "*.deb"

  release:
    needs: [build, package-deb]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create tarballs
      run: |
        # Create tarballs for each binary
        for artifact in ksr-cli-*-*; do
          if [[ -f "$artifact/ksr-cli" || -f "$artifact/ksr-cli.exe" ]]; then
            cd "$artifact"
            if [[ -f "ksr-cli.exe" ]]; then
              tar -czf "../${artifact}.tar.gz" ksr-cli.exe
            else
              tar -czf "../${artifact}.tar.gz" ksr-cli
            fi
            cd ..
          fi
        done
        
        # List all files for debugging
        ls -la
    
    - name: Generate checksums
      run: |
        sha256sum *.tar.gz > checksums.txt
        sha256sum deb-packages/*.deb >> checksums.txt || true
        cat checksums.txt
    
    - name: Create Release
      id: release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          deb-packages/*.deb
          checksums.txt
        body: |
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Installation
          
          ### Homebrew (macOS)
          ```bash
          brew install aywengo/tap/ksr-cli
          ```
          
          ### APT (Ubuntu/Debian)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ksr-cli_${{ steps.version.outputs.VERSION }}_amd64.deb
          sudo dpkg -i ksr-cli_${{ steps.version.outputs.VERSION }}_amd64.deb
          ```
          
          ### Manual Installation
          Download the appropriate binary for your platform from the assets below.
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew-tap:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout tap repository
      uses: actions/checkout@v4
      with:
        repository: aywengo/homebrew-tap
        token: ${{ secrets.TAP_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        path: homebrew-tap
    
    - name: Download checksums
      run: |
        curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/checksums.txt -o checksums.txt
        cat checksums.txt
    
    - name: Generate Homebrew formula
      run: |
        # Extract checksums for Darwin builds
        DARWIN_AMD64_SHA=$(grep "ksr-cli-darwin-amd64.tar.gz" checksums.txt | cut -d' ' -f1)
        DARWIN_ARM64_SHA=$(grep "ksr-cli-darwin-arm64.tar.gz" checksums.txt | cut -d' ' -f1)
        
        VERSION="${{ needs.release.outputs.version }}"
        TAG="${{ github.ref_name }}"
        
        # Create the formula
        cat > homebrew-tap/Formula/ksr-cli.rb << EOF
        class KsrCli < Formula
          desc "CLI tool for Kafka Schema Registry"
          homepage "https://github.com/${{ github.repository }}"
          version "$VERSION"
          
          if OS.mac? && Hardware::CPU.intel?
            url "https://github.com/${{ github.repository }}/releases/download/$TAG/ksr-cli-darwin-amd64.tar.gz"
            sha256 "$DARWIN_AMD64_SHA"
          elsif OS.mac? && Hardware::CPU.arm?
            url "https://github.com/${{ github.repository }}/releases/download/$TAG/ksr-cli-darwin-arm64.tar.gz"
            sha256 "$DARWIN_ARM64_SHA"
          else
            odie "ksr-cli is only supported on macOS"
          end
          
          def install
            bin.install "ksr-cli"
          end
          
          test do
            system "#{bin}/ksr-cli", "--help"
          end
        end
        EOF
        
        cat homebrew-tap/Formula/ksr-cli.rb
    
    - name: Commit and push formula
      working-directory: homebrew-tap
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        git add Formula/ksr-cli.rb
        git commit -m "Update ksr-cli to ${{ github.ref_name }}" || echo "No changes to commit"
        git push
